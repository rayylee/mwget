AUX_SOURCE_DIRECTORY(. SRC_LIST)

ADD_EXECUTABLE(mwget ${SRC_LIST})

SET(PACKAGE_VERSION "0.2.0")

EXECUTE_PROCESS(OUTPUT_VARIABLE BUILT_TIME
    OUTPUT_STRIP_TRAILING_WHITESPACE
    COMMAND date
    )
SET(BUILT_TIME "${BUILT_TIME}")

EXECUTE_PROCESS(OUTPUT_VARIABLE CC_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
    COMMAND cc --version
    COMMAND grep cc
    )
SET(CC_VERSION "${CC_VERSION}")

EXECUTE_PROCESS(OUTPUT_VARIABLE CXX_VERSION
    OUTPUT_STRIP_TRAILING_WHITESPACE
    COMMAND c++ --version
    COMMAND grep c++
    )
SET(CXX_VERSION "${CXX_VERSION}")

EXECUTE_PROCESS(OUTPUT_VARIABLE SYSTEM_TYPE
    OUTPUT_STRIP_TRAILING_WHITESPACE
    COMMAND uname -o -m
    )
SET(SYSTEM_TYPE "${SYSTEM_TYPE}")

SET(deplibs ${deplibs} pthread)

FIND_LIBRARY(deplib ssl)
IF(${deplib} STREQUAL "deplib-NOTFOUND")
    SET(HAVE_SSL 0)
    MESSAGE(STATUS "Checking for ssl... no")
ELSE()
    SET(HAVE_SSL 1)
    SET(deplibs ${deplibs} ssl)
    MESSAGE(STATUS "Checking for ssl... yes, found in ${deplib}")
ENDIF()

CONFIGURE_FILE(
    "${PROJECT_SOURCE_DIR}/config/config.h.in"
    "${PROJECT_SOURCE_DIR}/config/config.h"
    )

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/config)

TARGET_LINK_LIBRARIES(mwget ${deplibs})

INSTALL(TARGETS mwget
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
    )
